# Execution begins at address 0 
    .pos 0
    irmovq stack, %rsp  	# Set up stack pointer
    call main		# Execute main program
    halt			# Terminate program 

# Sample linked list
    .align 8
ele1:
    .quad 0x00a
    .quad ele2
ele2:
    .quad 0x0b0
    .quad ele3
ele3:
    .quad 0xc00
    .quad 0

main:	
    irmovq ele1,%rdi
	call rsum_list		# rsum_list(&ele1)
	ret

# long rsum_list(list_ptr ls)
rsum_list:
    andq %rdi,%rdi
    jne else
    irmovq $0,%rax # return 0
    ret
else:
    pushq %rbx
    mrmovq (%rdi),%rbx # val = ls->val
    mrmovq 8(%rdi),%rdi
    call rsum_list # rsum_list(ls->next)
    addq %rbx,%rax # return ls->val + rsum_list(ls->next)
    popq %rbx
    ret

# The stack starts here and grows to lower addresses
	.pos 0x200		
stack:	
